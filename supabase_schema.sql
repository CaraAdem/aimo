-- AIMO Supabase Schema
-- Auth: Profile-Erweiterung
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

alter table public.profiles enable row level security;
create policy "profile_self_access" on public.profiles
  for all using (auth.uid() = id);

-- Immobilien (Properties)
create table if not exists public.properties (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete set null,
  title text not null,
  address text,
  description text,
  type text check (type in ('Wohnung','Haus','Penthouse','Loft')),
  status text check (status in ('Verkauf','Vermietung')),
  rooms int,
  size numeric,
  price numeric,
  rent numeric,
  features text[],
  main_image text,
  created_at timestamp with time zone default now()
);

alter table public.properties enable row level security;
create policy "properties_read_all" on public.properties for select using (true);
create policy "properties_owner_write" on public.properties for all using (auth.uid() = owner_id);

-- Kunden (Customers)
create table if not exists public.customers (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete set null,
  name text not null,
  email text,
  phone text,
  status text,
  budget numeric,
  preferences text[],
  last_contact timestamp with time zone,
  notes text,
  created_at timestamp with time zone default now()
);

alter table public.customers enable row level security;
create policy "customers_read_owner" on public.customers for select using (auth.uid() = owner_id);
create policy "customers_owner_write" on public.customers for all using (auth.uid() = owner_id);

-- Geräte-Tracking
create table if not exists public.devices (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users(id) on delete cascade,
  platform text,
  model text,
  brand text,
  product text,
  identifier text,
  metadata jsonb,
  created_at timestamp with time zone default now()
);

alter table public.devices enable row level security;
create policy "devices_read_self" on public.devices for select using (auth.uid() = user_id);
create policy "devices_write_self" on public.devices for all using (auth.uid() = user_id);

-- QR Scans / Exposé Abrufe
create table if not exists public.qr_scans (
  id bigint generated by default as identity primary key,
  property_id uuid references public.properties(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  device_fingerprint text,
  payload text,
  ip inet,
  user_agent text,
  scanned_at timestamp with time zone default now()
);

alter table public.qr_scans enable row level security;
create policy "qr_scans_insert_all" on public.qr_scans for insert with check (true);
create policy "qr_scans_read_owner" on public.qr_scans for select using (
  exists (
    select 1 from public.properties p
    where p.id = qr_scans.property_id and p.owner_id = auth.uid()
  )
);

-- Chat Verlauf (optional)
create table if not exists public.chats (
  id bigint generated by default as identity primary key,
  property_id uuid references public.properties(id) on delete cascade,
  user_id uuid references auth.users(id) on delete set null,
  role text check (role in ('user','assistant')),
  content text not null,
  created_at timestamp with time zone default now()
);

alter table public.chats enable row level security;
create policy "chats_insert_all" on public.chats for insert with check (true);
create policy "chats_read_owner" on public.chats for select using (
  exists (
    select 1 from public.properties p
    where p.id = chats.property_id and p.owner_id = auth.uid()
  )
);